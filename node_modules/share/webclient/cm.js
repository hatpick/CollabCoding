// Generated by CoffeeScript 1.3.3
(function() {
  var applyToShareJS;

  applyToShareJS = function(editorDoc, delta, doc) {
    var action, change, end_pos, pos, preActionCodemirrorContent, text, _results;
    pos = void 0;
    text = void 0;
    change = delta;
    _results = [];
    while (true) {
      pos = myIndexFromPos(change.from.line, change.from.ch, preActionCodemirrorContent);
      end_pos = myIndexFromPos(change.to.line, change.to.ch, preActionCodemirrorContent);
      action = "";
      if (change.text[0] === "" && change.text.length === 1) {
        if (change.from.line !== change.to.line) {
          action = "removeLines";
        } else {
          action = "removeText";
        }
      } else {
        if (change.text.length > 1) {
          action = "insertLines";
        } else {
          action = "insertText";
        }
      }
      switch (action) {
        case "insertText":
          if (pos !== end_pos) {
            doc.del(pos, end_pos - pos);
          }
          doc.insert(pos, change.text[0]);
          break;
        case "removeText":
          doc.del(pos, end_pos - pos);
          break;
        case "insertLines":
          if (pos !== end_pos) {
            doc.del(pos, end_pos - pos);
          }
          text = change.text.join("\n");
          doc.insert(pos, text);
          break;
        case "removeLines":
          doc.del(pos, end_pos - pos);
          break;
        default:
          throw new Error("unknown action: " + delta.action);
      }
      preActionCodemirrorContent = doc.getText();
      if (!change.next) {
        break;
      }
      _results.push(change = change.next);
    }
    return _results;
  };

  window.sharejs.Doc.prototype.attach_codemirror = function(editor, keepEditorContents) {
    var check, doc, editorDoc, editorListener, myIndexFromPos, preActionCodemirrorContent, suppress;
    check = void 0;
    doc = void 0;
    editorDoc = void 0;
    editorListener = void 0;
    suppress = void 0;
    if (!this.provides["text"]) {
      throw new Error("Only text documents can be attached to CodeMirror");
    }
    doc = this;
    editorDoc = editor;
    check = function() {
      return window.setTimeout((function() {
        var editorText, otText;
        editorText = void 0;
        otText = void 0;
        editorText = editorDoc.getValue();
        otText = doc.getText();
        if (editorText !== otText) {
          return console.error("Texts are out of sync. Most likely this is caused by a bug in this code.");
        }
      }), 0);
    };
    if (keepEditorContents) {
      doc.del(0, doc.getText().length);
      doc.insert(0, editorDoc.getValue());
    } else {
      editorDoc.setValue(doc.getText());
    }
    preActionCodemirrorContent = editorDoc.getValue();
    check();
    suppress = false;
    editorListener = function(change, tc) {
      if (suppress) {
        return;
      }
      applyToShareJS(editorDoc, tc, doc);
      return check();
    };
    editorDoc.setOption("onChange", editorListener);
    myIndexFromPos = function(line, ch, value) {
      var count, i, lines, myIndex;
      myIndex = 0;
      count = 0;
      lines = value.split("\n");
      i = 0;
      while (i < lines.length) {
        if (!(count < line)) {
          myIndex += ch;
          break;
        }
        count++;
        i++;
      }
      return myIndex;
    };
    doc.on("insert", function(pos, text) {
      var start;
      suppress = true;
      start = editorDoc.posFromIndex(pos);
      editorDoc.replaceRange(text, start);
      suppress = false;
      preActionCodemirrorContent = editorDoc.getValue();
      return check();
    });
    doc.on("delete", function(pos, text) {
      var end, range, start;
      range = void 0;
      suppress = true;
      start = editorDoc.posFromIndex(pos);
      end = editorDoc.posFromIndex(pos + text.length);
      editorDoc.replaceRange("", start, end);
      suppress = false;
      preActionCodemirrorContent = editorDoc.getValue();
      return check();
    });
    doc.detach_codemirror = function() {
      editorDoc.removeListener("change", editorListener);
      return delete doc.detach_codemirror;
    };
  };

}).call(this);
