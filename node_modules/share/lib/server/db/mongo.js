// Generated by CoffeeScript 1.3.3
var MongoDb, defaultOptions, mongodb;

mongodb = require('mongodb');

defaultOptions = {
  db: 'sharejs',
  hostname: '127.0.0.1',
  port: 27017,
  mongoOptions: {
    auto_reconnect: true
  }
};

module.exports = MongoDb = function(options) {
  var client, k, opsCollectionForDoc, v, _ref;
  if (options == null) {
    options = {};
  }
  for (k in defaultOptions) {
    v = defaultOptions[k];
    if ((_ref = options[k]) == null) {
      options[k] = v;
    }
  }
  client = new mongodb.Db(options.db, new mongodb.Server(options.hostname, options.port, options.mongoOptions));
  opsCollectionForDoc = function(docName) {
    return 'ops.' + encodeURIComponent(docName).replace(/\./g, '%2E').replace(/-/g, '%2D');
  };
  this.create = function(docName, data, callback) {
    if (opsCollectionForDoc(docName).length > 90) {
      return typeof callback === "function" ? callback("Document name too long: " + docName) : void 0;
    }
    return client.collection('docs', function(err, collection) {
      var doc;
      if (err) {
        return typeof callback === "function" ? callback(err) : void 0;
      }
      doc = {
        _id: docName,
        data: data
      };
      return collection.insert(doc, {
        safe: true
      }, function(err, doc) {
        if ((err != null ? err.code : void 0) === 11000) {
          return typeof callback === "function" ? callback("Document already exists") : void 0;
        }
        if (err) {
          console.warn("failed to create new doc: " + err);
        }
        if (err) {
          return typeof callback === "function" ? callback(err) : void 0;
        }
        return typeof callback === "function" ? callback() : void 0;
      });
    });
  };
  this.getOps = function(docName, start, end, callback) {
    if (start === end) {
      callback(null, []);
      return;
    }
    return client.collection(opsCollectionForDoc(docName), function(err, collection) {
      var query;
      if (err) {
        return typeof callback === "function" ? callback(err) : void 0;
      }
      query = {
        _id: {
          $gte: start
        }
      };
      if (end) {
        query._id.$lt = end;
      }
      return collection.find(query).sort('_id').toArray(function(err, docs) {
        var doc;
        if (err) {
          console.warn("failed to get ops for " + docName + ": " + err);
        }
        if (err) {
          return typeof callback === "function" ? callback(err) : void 0;
        }
        return typeof callback === "function" ? callback(null, (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = docs.length; _i < _len; _i++) {
            doc = docs[_i];
            _results.push(doc.opData);
          }
          return _results;
        })()) : void 0;
      });
    });
  };
  this.writeOp = function(docName, opData, callback) {
    return client.collection(opsCollectionForDoc(docName), function(err, collection) {
      var doc;
      if (err) {
        return typeof callback === "function" ? callback(err) : void 0;
      }
      doc = {
        _id: opData.v,
        opData: {
          op: opData.op,
          meta: opData.meta
        }
      };
      return collection.insert(doc, {
        safe: true
      }, function(err, doc) {
        if (err) {
          console.warn("failed to save op " + opData + " for " + docName + ": " + err);
        }
        if (err) {
          return typeof callback === "function" ? callback(err) : void 0;
        }
        return typeof callback === "function" ? callback(null, doc) : void 0;
      });
    });
  };
  this.writeSnapshot = function(docName, data, dbMeta, callback) {
    return client.collection('docs', function(err, collection) {
      var doc;
      if (err) {
        return typeof callback === "function" ? callback(err) : void 0;
      }
      doc = {
        _id: docName,
        data: data
      };
      return collection.update({
        _id: docName
      }, doc, {
        safe: true
      }, function(err, doc) {
        if (err) {
          console.warn("failed to save snapshot for doc " + docName + ": " + err);
        }
        if (err) {
          return typeof callback === "function" ? callback(err) : void 0;
        }
        return typeof callback === "function" ? callback() : void 0;
      });
    });
  };
  this.getSnapshot = function(docName, callback) {
    return client.collection('docs', function(err, collection) {
      if (err) {
        return typeof callback === "function" ? callback(err) : void 0;
      }
      return collection.findOne({
        _id: docName
      }, function(err, doc) {
        if (err) {
          return typeof callback === "function" ? callback(err) : void 0;
        }
        if (doc !== null) {
          return callback(null, doc.data);
        } else {
          return callback("Document does not exist");
        }
      });
    });
  };
  this["delete"] = function(docName, dbMeta, callback) {
    client.collection(opsCollectionForDoc(docName), function(err, collection) {
      return collection.drop();
    });
    return client.collection('docs', function(err, collection) {
      if (err) {
        return typeof callback === "function" ? callback(err) : void 0;
      }
      return collection.remove({
        _id: docName
      }, {
        safe: true
      }, function(err, count) {
        if (err) {
          return typeof callback === "function" ? callback(err) : void 0;
        }
        if (count === 0) {
          return typeof callback === "function" ? callback("Document does not exist") : void 0;
        } else {
          return typeof callback === "function" ? callback(null) : void 0;
        }
      });
    });
  };
  this.close = function() {
    return client.close();
  };
  return this;
};
